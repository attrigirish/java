Looping Statements in Java

1. for
2. while
3. do while


Syntax:

for(initialization;condition;updation)
{
	//statement(s)
}


Counter Controlled Loops:
	- When the iteration values are in arithmetic progression.
	- When no. of iterations are known in advance.


Syntax:

initialization;
while(condition)
{
	//statement(s)
	updation;
}

or

while(condition)
{
	//statement(s)
}

e.g.

while(!f.eof())
{
	
}

Sentinel Controlled Loop:
	- When the iteration steps are variables.
	- When no. of iterations are not known in advance.

	E.g.

	- While reading the content of file one line at a time.

Sometimes, loop control may need to be based on the value of what we are processing. In this case, we would sentinel-controlled repetition. Sentinel-controlled repetition is sometimes called indefinite repetition because it is not known in advance how many times the loop will be executed. It is a repetition procedure for solving a problem by using a sentinel value (also called a signal value, a dummy value or a flag value) to indicate "end of data entry". The sentinel value itself is not a part of the processed data.

An example of when we would use sentinel-controlled repetition is when we are processing data from a file and we do not know in advance when we would reach the end of file.


Syntax: do-while


initialization;
do
{
	//statement(s)
	updation;
}while(condition);




Program:

1. Write a program to print following output:
		1 2 3 ... N


for(i=1;i<=n;i++)
{
	S.o.p(i);
}

2. Write a program to print all factors of a number:
		E.g.

		Input    -  24
		Output   -  1 2 3 4 6 8 12 24


for(i=1;i<=n;i++)
{
	if(n%i==0)
	{
		System.out.println(i);
	}
}


3. Write a program to count the no. of a factors of a 		given no.

		E.g.

		Input 	-	24
		Output 	-	8

count=0;
for(i=1;i<=n;i++)
{
	if(n%i==0)
	{
		count++;
	}
}
System.out.println(count);


Program : A Hailstone series is defined as follows: start with any integer value greater than 0, say x. If x is even, then the next value in the series is x/2; if x is odd, then the next value in the series is 3x + 1. Now apply the same rules to create the next value in the series, and so on. The name Hailstone comes from the property that the values in such a series alternate between going up and down (up for odd values and down for even values.)

For instance, here is the Hailstone series generated from starting value 17:

17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1


int x=input.nextInt();
while(true)
{
	System.out.println(x);
	if(x==1)
	{
		break;
	}
	x = (x%2==0) ? x/2 : x*3+1;
}



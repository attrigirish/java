Java Exception Handling


Types of Errors

1. Syntax/Syntactical Errors

Errors due to the fact that the syntax of the language is not respected. With compiled languages, you will run into any syntax errors at compile time, and they will have to be corrected before the program can run. 

E.g. Missing a semicolon, using uninitialized variable.

2. Logical Errors

Logical errors are the hardest of all error types to detect. They do not cause the program to crash or simply not work at all, they cause it to “misbehave” in some way, rendering wrong output of some kind.  Logical errors “make sense” as to the computer language itself, but they simply don’t fit into the program correctly.

E.g. Perform subtract operation in place of addition.

3. Run Time Errors (Exceptions)

Runtime error refers to an error that takes place while executing a program. As opposed to the compilation errors that occur during a program compilation, runtime errors occur only during the execution of the program. Runtime errors imply bugs in the program or issues that the developers had expected but were unable to correct. For example, insufficient memory can often trigger a runtime error. 




Java Exceptions

An exception is a problem that arises during the execution of a program. It can occur for various reasons say-

    A user has entered an invalid data
    File not found
    A network connection has been lost in the middle of communications
    The JVM has run out of a memory



1. Checked exceptions − A checked exception is an exception that is checked (notified) by the compiler at compilation-time, these are also called as compile time exceptions. These exceptions cannot simply be ignored, the programmer should take care of (handle) these exceptions.

For example, if you use FileReader class in your program to read data from a file, if the file specified in its constructor doesn't exist, then a FileNotFoundException occurs, and the compiler prompts the programmer to handle the exception.

2. Unchecked exceptions − An unchecked exception is an exception that occurs at the time of execution. These are also called as Runtime Exceptions. These include programming bugs, such as logic errors or improper use of an API. Runtime exceptions are ignored at the time of compilation.

For example, if you have declared an array of size 5 in your program, and trying to call the 6th element of the array then an ArrayIndexOutOfBoundsExceptionexception occurs.


3. Errors - These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. They are also ignored at the time of compilation.




Exception Handling in Java

In Java abnormal conditions/situations can be handled by using the following program logic.

try
{
	//Statement(s) which may product an exception
}
catch(ExceptionType obj)
{
	//Statement(s) to execute if an exception occurs
}